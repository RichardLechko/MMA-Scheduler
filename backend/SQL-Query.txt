-- First drop existing tables and types
DROP TABLE IF EXISTS fights CASCADE;
DROP TABLE IF EXISTS events CASCADE;
DROP TABLE IF EXISTS fighters CASCADE;
DROP TABLE IF EXISTS fighter_rankings CASCADE;
DROP TYPE IF EXISTS event_status CASCADE;

-- Enable UUID generation
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create fighters table with properly organized columns
CREATE TABLE fighters (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    
    -- Basic information
    ufc_id TEXT NOT NULL,
    name TEXT NOT NULL,
    nickname TEXT,
    weight_class TEXT,
    rank TEXT,
    status TEXT,
    fighting_out_of TEXT,
    height TEXT,
    weight TEXT,
    age INTEGER,
    nationality TEXT,
    wiki_url TEXT,
    ufc_url TEXT,
    reach TEXT,
    
    -- Record summary
    wins INTEGER DEFAULT 0,
    losses INTEGER DEFAULT 0,
    draws INTEGER DEFAULT 0,
    no_contests INTEGER DEFAULT 0,
    
    -- Win methods
    ko_wins INTEGER DEFAULT 0,
    sub_wins INTEGER DEFAULT 0,
    dec_wins INTEGER DEFAULT 0,
    
    -- Loss methods
    loss_by_ko INTEGER DEFAULT 0,
    loss_by_sub INTEGER DEFAULT 0,
    loss_by_dec INTEGER DEFAULT 0,
    loss_by_dq INTEGER DEFAULT 0,
    
    -- Timestamps
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    CONSTRAINT unique_ufc_id UNIQUE (ufc_id),
    CONSTRAINT unique_fighter_name UNIQUE (name)
);

ALTER TABLE fighters DROP CONSTRAINT unique_fighter_name;
ALTER TABLE fighters ADD CONSTRAINT unique_fighter_id UNIQUE (ufc_id);

-- Create events table
CREATE TABLE events (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name TEXT NOT NULL,
    event_date TIMESTAMP WITH TIME ZONE NOT NULL,
    venue TEXT,
    city TEXT,
    country TEXT,
    status TEXT,
    wiki_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    CONSTRAINT unique_event_name UNIQUE (name)
);

CREATE TABLE fights (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    event_id UUID REFERENCES events(id),
    fighter1_id UUID REFERENCES fighters(id),
    fighter2_id UUID REFERENCES fighters(id),
    fighter1_name TEXT NOT NULL,
    fighter2_name TEXT NOT NULL,
    fighter1_rank TEXT,
    fighter2_rank TEXT,
    weight_class TEXT NOT NULL,
    is_main_event BOOLEAN DEFAULT false,
    fighter1_was_champion BOOLEAN DEFAULT false,
    fighter2_was_champion BOOLEAN DEFAULT false,
    was_title_fight BOOLEAN DEFAULT false,
    fight_order INTEGER,
    winner_id UUID REFERENCES fighters(id),
    result_method TEXT,
    result_method_details TEXT,
    result_round INTEGER,
    result_time TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT uq_fights_event_fighters UNIQUE (event_id, fighter1_id, fighter2_id)
);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Add triggers for updated_at timestamps
CREATE TRIGGER update_fighters_updated_at
    BEFORE UPDATE ON fighters
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_events_updated_at
    BEFORE UPDATE ON events
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_fights_updated_at
    BEFORE UPDATE ON fights
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Create indexes for faster lookups
CREATE INDEX idx_fighters_name ON fighters(name);
CREATE INDEX idx_fighters_ufc_id ON fighters(ufc_id);
CREATE INDEX idx_fighters_weight_class ON fighters(weight_class);
CREATE INDEX idx_fighters_rank ON fighters(rank);
CREATE INDEX idx_fighters_nationality ON fighters(nationality);

CREATE INDEX idx_events_date ON events(event_date);
CREATE INDEX idx_events_status ON events(status);

CREATE INDEX idx_fights_event ON fights(event_id);
CREATE INDEX idx_fights_fighter1 ON fights(fighter1_id);
CREATE INDEX idx_fights_fighter2 ON fights(fighter2_id);
CREATE INDEX idx_fights_weight_class ON fights(weight_class);
CREATE INDEX idx_fights_winner ON fights(winner_id);
CREATE INDEX idx_fights_result_method ON fights(result_method);
CREATE INDEX idx_fights_was_title_fight ON fights(was_title_fight);
CREATE INDEX idx_fights_fighter1_rank ON fights(fighter1_rank);
CREATE INDEX idx_fights_fighter2_rank ON fights(fighter2_rank);

-- Create fighter rankings table for multiple rankings per fighter
CREATE TABLE fighter_rankings (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    fighter_id UUID REFERENCES fighters(id),
    weight_class TEXT NOT NULL,
    rank TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    CONSTRAINT uq_fighter_weight_class UNIQUE (fighter_id, weight_class)
);

-- Add trigger for updated_at timestamp
CREATE TRIGGER update_fighter_rankings_updated_at
    BEFORE UPDATE ON fighter_rankings
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Create index for faster lookups
CREATE INDEX idx_fighter_rankings_fighter_id ON fighter_rankings(fighter_id);
CREATE INDEX idx_fighter_rankings_weight_class ON fighter_rankings(weight_class);
CREATE INDEX idx_fighter_rankings_rank ON fighter_rankings(rank);

CREATE TABLE tournaments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    event_id UUID NOT NULL,
    name VARCHAR(255) NOT NULL,
    bracket_type VARCHAR(50) NOT NULL,
    weight_class VARCHAR(100) NOT NULL,
    winner_id UUID,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE,
    FOREIGN KEY (winner_id) REFERENCES fighters(id) ON DELETE SET NULL
);

CREATE TABLE tournament_fights (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    tournament_id UUID NOT NULL,
    fight_id UUID NOT NULL,
    round_name VARCHAR(100) NOT NULL, -- e.g., "Quarterfinal", "Semifinal", "Final"
    bracket_position INTEGER,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    FOREIGN KEY (tournament_id) REFERENCES tournaments(id) ON DELETE CASCADE,
    FOREIGN KEY (fight_id) REFERENCES fights(id) ON DELETE CASCADE,
    UNIQUE(tournament_id, fight_id)  -- Prevent duplicate fight entries in a tournament
);

CREATE INDEX idx_tournaments_event_id ON tournaments(event_id);
CREATE INDEX idx_tournament_fights_tournament_id ON tournament_fights(tournament_id);
CREATE INDEX idx_tournament_fights_fight_id ON tournament_fights(fight_id);